<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BMS_MasterNew.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BMS_MasterNew.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Mon Mar 14 15:43:19 2016
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SlavePollingService &rArr; SendCommandToSlave &rArr; RfSendAndWaitAck &rArr; CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ACMP0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1b]">ACMP1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[15]">ADC_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[17]">FTM0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[18]">FTM1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[19]">FTM2_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[b]">FTMRE_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[f]">I2C1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[21]">ICS_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[d]">IRQ_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1e]">KBI0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1f]">KBI1_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[24]">MSCAN_RX_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[25]">MSCAN_TX_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1c]">PIT_CH0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1d]">PIT_CH1_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[c]">PMC_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[23]">PWT_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2c]">PacketParse</a> from rf_service.o(.text) referenced from cc1120.o(.text)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[6]">Reserved16_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[7]">Reserved17_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[8]">Reserved18_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[9]">Reserved19_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[20]">Reserved42_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2b]">RfSetWaitTime</a> from rf_arbitration.o(.text) referenced from drivers.o(.text)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2a]">SetUplinkParam</a> from rf_service.o(.text) referenced from drivers.o(.text)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_skeaz1284.o(.text) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[12]">UART0_IRQHandler</a> from drivers.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[22]">WDOG_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[2d]">fputc</a> from debug.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[28]">init_data_bss</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ba]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[43]"></a>GPIO_Init</STRONG> (Thumb, 318 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[be]"></a>WDOG_Disable</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>WDOG_DisableWDOGEnableUpdate</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>WDOG_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>WDOG_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_init
</UL>

<P><STRONG><a name="[c1]"></a>WDOG_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>WDOG_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>WDOG_EnableUpdate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>WDOG_DisableUpdate</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>FTMRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>KBI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>WDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveLogData
</UL>

<P><STRONG><a name="[c6]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>Ics_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ics_init &rArr; ICS_Init &rArr; FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FBELP
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[33]"></a>Uart_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Uart_init &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[36]"></a>Pit_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pit_init &rArr; PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[38]"></a>Spi_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Spi_init &rArr; SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[3a]"></a>Can_init</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can_init &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[3c]"></a>Kbi_init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Kbi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[3d]"></a>Irq_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[3e]"></a>Adc_init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc_init &rArr; ADC_Init &rArr; ADC_SelectClockDivide
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[40]"></a>Wdog_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drivers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>

<P><STRONG><a name="[c8]"></a>CPU_Sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drivers.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drivers.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>User_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = User_Init &rArr; CC1120_init &rArr; registerConfig &rArr; CC1120_SetCarrierFreq &rArr; manualCalibration &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kbi_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ics_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>WriteCanQueue</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, drivers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendFrame
</UL>

<P><STRONG><a name="[47]"></a>ReadCanQueue</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadCanQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_TX_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>CAN_SendFrame</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, drivers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanQueue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[49]"></a>CAN_ReadFrame</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_ReadFrame &rArr; CAN_ReadOneFrameFromBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadOneFrameFromBuff
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_RX_IRQHandler
</UL>

<P><STRONG><a name="[1d]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_CH1_IRQHandler &rArr; timer1_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_proc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfWaitAckProc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendTimeoutProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>KBI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = KBI1_IRQHandler &rArr; CC1120_ISRHandler &rArr; CC1120_RecivePacket &rArr; cc112xSpiReadReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendSuccessHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_ISRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugSendCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MSCAN_RX_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MSCAN_RX_IRQHandler &rArr; CAN_ReadFrame &rArr; CAN_ReadOneFrameFromBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MSCAN_TX_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSCAN_TX_IRQHandler &rArr; CAN_LoadOneFrameToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LoadOneFrameToBuff
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drivers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ICS_SetClkDivider</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[54]"></a>OSC_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FEE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBI_to_FBE
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>

<P><STRONG><a name="[53]"></a>FEI_to_FEE</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[ca]"></a>FEI_to_FBI</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>FEI_to_FBE</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[57]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FBE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[58]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[59]"></a>FEE_to_FEI</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[5b]"></a>FEE_to_FBI</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[cb]"></a>FEE_to_FBE</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>FBI_to_FBE</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[5d]"></a>FBI_to_FEE</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
</UL>

<P><STRONG><a name="[cc]"></a>FBI_to_FBILP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>FBI_to_FEI</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>FBE_to_FBI</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[ce]"></a>FBE_to_FEE</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>FBE_to_FEI</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ics.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Disable
</UL>

<P><STRONG><a name="[32]"></a>FBE_to_FBELP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ics_init
</UL>

<P><STRONG><a name="[cf]"></a>FBELP_to_FBE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>FBILP_to_FBI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>ICS_Trim</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>ICS_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ics_init
</UL>

<P><STRONG><a name="[d2]"></a>ICS_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>OSC_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>CAN_Init</STRONG> (Thumb, 836 bytes, Stack size 24 bytes, mscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpEn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpIntEn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsInitialMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_InitialModeReq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_init
</UL>

<P><STRONG><a name="[66]"></a>CAN_LaunchInitialRequest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mscan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsInitialMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_InitialModeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[67]"></a>CAN_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mscan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LaunchInitialRequest
</UL>

<P><STRONG><a name="[68]"></a>CAN_EnterSleep</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mscan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpEn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUpIntEn
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsInitialMode
</UL>

<P><STRONG><a name="[d4]"></a>CAN_WakeUpFromSleep</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mscan.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>CAN_LoadOneFrameToBuff</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_LoadOneFrameToBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSCAN_TX_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>CAN_ReadOneFrameFromBuff</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, mscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_ReadOneFrameFromBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadFrame
</UL>

<P><STRONG><a name="[d5]"></a>MSCAN_SetRxCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mscan.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>MSCAN_SetTxCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mscan.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>MSCAN_RxIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mscan.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>MSCAN_TxIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mscan.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>PIT_SetLoadVal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[37]"></a>PIT_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetLoadVal
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_init
</UL>

<P><STRONG><a name="[d9]"></a>PIT_SetCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>PIT_DeInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetLoadVal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisableChain
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisableInt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelDisable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[71]"></a>PIT_Ch0Isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>

<P><STRONG><a name="[72]"></a>PIT_Ch1Isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>

<P><STRONG><a name="[34]"></a>UART_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_init
</UL>

<P><STRONG><a name="[da]"></a>UART_GetChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>UART_PutChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>UART_SetBaudrate</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[dc]"></a>UART_EnableInterrupt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>UART_DisableInterrupt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>UART_GetFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>

<P><STRONG><a name="[75]"></a>UART_CheckFlag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlags
</UL>

<P><STRONG><a name="[de]"></a>UART_SendWait</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>UART_ReceiveWait</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>UART_WaitTxComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>UART_SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>UART0_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>UART1_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>UART2_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>SPI_SetBaudRate</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[39]"></a>SPI_Init</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ModfEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_init
</UL>

<P><STRONG><a name="[e5]"></a>SPI_TransferWait</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>SPI_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>SPI_SetCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>Spi_RdWrByte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi_RdWrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx16BitRegAccess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxReadWriteBurstSingle
</UL>

<P><STRONG><a name="[e8]"></a>SPI0_Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>SPI1_Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>ADC_SetFifoLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[7c]"></a>ADC_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[7b]"></a>ADC_SelectClockDivide</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SelectClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[7a]"></a>ADC_SelectClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[3f]"></a>ADC_Init</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init &rArr; ADC_SelectClockDivide
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClockDivide
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetFifoLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_init
</UL>

<P><STRONG><a name="[7f]"></a>ADC_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[7e]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[80]"></a>ADC_PollRead</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>

<P><STRONG><a name="[ea]"></a>ADC_VrefSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[eb]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>DebugSendCycle</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>Debug_Process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>DisplaySlaveID</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplaySlaveID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMSGDisplayService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveMSG
</UL>

<P><STRONG><a name="[82]"></a>DisplaySlaveLogData</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisplaySlaveLogData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMSGDisplayService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveMSG
</UL>

<P><STRONG><a name="[84]"></a>DisplayCellVoltages</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisplayCellVoltages &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMSGDisplayService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveMSG
</UL>

<P><STRONG><a name="[85]"></a>DisplaySlaveMSG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCellVoltages
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveLogData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveID
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[86]"></a>SlaveMSGDisplayService</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SlaveMSGDisplayService &rArr; DisplaySlaveID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCellVoltages
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveLogData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveID
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; SlavePollingService &rArr; SendCommandToSlave &rArr; RfSendAndWaitAck &rArr; CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePollingService
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerEvent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMSGDisplayService
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4b]"></a>timer1_proc</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer1_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CH1_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>InitTimerEvent</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>SetTimer1</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetTimer1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>StopTimer1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>GetTimer1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetTimer1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>trx8BitRegAccess</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RdWrByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxReadWriteBurstSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadRxFifo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteTxFifo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadReg
</UL>

<P><STRONG><a name="[8e]"></a>trx16BitRegAccess</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = trx16BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RdWrByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxReadWriteBurstSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadReg
</UL>

<P><STRONG><a name="[8f]"></a>trxSpiCmdStrobe</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trxSpiCmdStrobe &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RdWrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_RecivePacket
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackStatusByte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackMarcStatusIDLE
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xGetRxStatus
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xGetTxStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateRCOsc
</UL>

<P><STRONG><a name="[90]"></a>cc112xSpiReadReg</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cc112xSpiReadReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx16BitRegAccess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_RecivePacket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateRCOsc
</UL>

<P><STRONG><a name="[91]"></a>cc112xSpiWriteReg</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx16BitRegAccess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetDevAddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetSyncWord
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetPreamWord
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetCarrierFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateRCOsc
</UL>

<P><STRONG><a name="[92]"></a>cc112xSpiWriteTxFifo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendPacket
</UL>

<P><STRONG><a name="[93]"></a>cc112xSpiReadRxFifo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cc112xSpiReadRxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_RecivePacket
</UL>

<P><STRONG><a name="[94]"></a>cc112xGetTxStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cc1120.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>

<P><STRONG><a name="[95]"></a>cc112xGetRxStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cc1120.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>

<P><STRONG><a name="[96]"></a>CheackMarcStatusIDLE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cc1120.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>

<P><STRONG><a name="[97]"></a>GetStatusByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetStatusByte &rArr; trxSpiCmdStrobe &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUplinkParam
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
</UL>

<P><STRONG><a name="[98]"></a>ChangeWorkMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ChangeWorkMode &rArr; trxSpiCmdStrobe &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUplinkParam
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_RecivePacket
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendCheackPacket
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendPacket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheackStatusByte
</UL>

<P><STRONG><a name="[99]"></a>CheackStatusByte</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cc1120.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>

<P><STRONG><a name="[9a]"></a>manualCalibration</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = manualCalibration &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetCarrierFreq
</UL>

<P><STRONG><a name="[9b]"></a>CC1120_SetCarrierFreq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CC1120_SetCarrierFreq &rArr; manualCalibration &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerConfig
</UL>

<P><STRONG><a name="[9c]"></a>CC1120_SetPreamWord</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CC1120_SetPreamWord &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUplinkParam
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
</UL>

<P><STRONG><a name="[9d]"></a>CC1120_SetSyncWord</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CC1120_SetSyncWord &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
</UL>

<P><STRONG><a name="[9e]"></a>CC1120_SetDevAddr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1120_SetDevAddr &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
</UL>

<P><STRONG><a name="[a0]"></a>registerConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = registerConfig &rArr; CC1120_SetCarrierFreq &rArr; manualCalibration &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetCarrierFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_init
</UL>

<P><STRONG><a name="[44]"></a>CC1120_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CC1120_init &rArr; registerConfig &rArr; CC1120_SetCarrierFreq &rArr; manualCalibration &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateRCOsc
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Init
</UL>

<P><STRONG><a name="[a1]"></a>CC1120_SendPacket</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendCheackPacket
</UL>

<P><STRONG><a name="[a2]"></a>CC1120_SendCheackPacket</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendPacket
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendWaitSuccess
</UL>

<P><STRONG><a name="[a3]"></a>CC1120_SendWaitSuccess</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendCheackPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAndWaitAck
</UL>

<P><STRONG><a name="[4c]"></a>CC1120_SendTimeoutProc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cc1120.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CH1_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>CC1120_SendSuccessHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1120_SendSuccessHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI1_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>CC1120_RecivePacket</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CC1120_RecivePacket &rArr; cc112xSpiReadReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadRxFifo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_ISRHandler
</UL>

<P><STRONG><a name="[4f]"></a>CC1120_ISRHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CC1120_ISRHandler &rArr; CC1120_RecivePacket &rArr; cc112xSpiReadReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_RecivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI1_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>RfWaitAckProc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rf_arbitration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CH1_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>SetRfAckStateSuccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rf_arbitration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketParse
</UL>

<P><STRONG><a name="[2b]"></a>RfSetWaitTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_arbitration.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>RfSendAndWaitAck</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rf_arbitration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RfSendAndWaitAck &rArr; CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SendWaitSuccess
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaveLog
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlaveInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToSlave
</UL>

<P><STRONG><a name="[2c]"></a>PacketParse</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PacketParse &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfAckStateSuccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1120.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>SetUplinkParam</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SetUplinkParam &rArr; CC1120_SetPreamWord &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetPreamWord
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drivers.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>SetDownlinkParam</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetDownlinkParam &rArr; CC1120_SetSyncWord &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetDevAddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetSyncWord
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_SetPreamWord
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualCalibration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeWorkMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaveLog
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlaveInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToSlave
</UL>

<P><STRONG><a name="[aa]"></a>CreatPacket</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CreatPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlaveLog
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlaveInfo
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToSlave
</UL>

<P><STRONG><a name="[ab]"></a>SendCommandToSlave</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SendCommandToSlave &rArr; RfSendAndWaitAck &rArr; CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAndWaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePollingService
</UL>

<P><STRONG><a name="[ac]"></a>CreatCmdToString</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rf_service.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[ad]"></a>SetSlaveInfo</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, rf_service.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAndWaitAck
</UL>

<P><STRONG><a name="[ae]"></a>GetSlaveLog</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, rf_service.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDownlinkParam
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAndWaitAck
</UL>

<P><STRONG><a name="[8a]"></a>SlavePollingService</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, rf_service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SlavePollingService &rArr; SendCommandToSlave &rArr; RfSendAndWaitAck &rArr; CC1120_SendWaitSuccess &rArr; CC1120_SendCheackPacket &rArr; CC1120_SendPacket &rArr; cc112xSpiWriteTxFifo &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, system_skeaz1284.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LoadOneFrameToBuff
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadFrame
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendFrame
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanQueue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanQueue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatCmdToString
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatPacket
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketParse
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketParse
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f7]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[4e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMSGDisplayService
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveMSG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCellVoltages
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveLogData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySlaveID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf_service.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketParse
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[fa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[35]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drivers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Irq_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kbi_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_init
</UL>

<P><STRONG><a name="[5a]"></a>OSC_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ics.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FEI
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FBE_to_FBI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FBI
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEE_to_FEI
</UL>

<P><STRONG><a name="[63]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[61]"></a>CAN_InitialModeReq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LaunchInitialRequest
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[62]"></a>CAN_IsInitialMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterSleep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LaunchInitialRequest
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[60]"></a>CAN_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[64]"></a>CAN_WakeUpIntEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterSleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[65]"></a>CAN_WakeUpEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mscan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterSleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[6d]"></a>PIT_ChannelDisable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[6e]"></a>PIT_ChannelDisableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>PIT_ChannelDisableChain</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[70]"></a>PIT_ChannelClrFlags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch1Isr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Ch0Isr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_DeInit
</UL>

<P><STRONG><a name="[78]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[79]"></a>SPI_ModfEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[8b]"></a>trxReadWriteBurstSingle</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RdWrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx16BitRegAccess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trx8BitRegAccess
</UL>

<P><STRONG><a name="[9f]"></a>calibrateRCOsc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cc1120.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = calibrateRCOsc &rArr; cc112xSpiWriteReg &rArr; trx8BitRegAccess &rArr; trxReadWriteBurstSingle &rArr; Spi_RdWrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiWriteReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc112xSpiReadReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trxSpiCmdStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1120_init
</UL>

<P><STRONG><a name="[b5]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[b7]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
